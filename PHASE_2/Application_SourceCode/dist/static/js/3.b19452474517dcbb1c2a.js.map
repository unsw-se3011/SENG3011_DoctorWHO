{"version":3,"sources":["webpack:///src/components/LineGraph.vue","webpack:///./src/components/LineGraph.vue?3c31","webpack:///./src/components/LineGraph.vue"],"names":["LineGraph","name","mounted","margin","width","window","innerWidth","height","innerHeight","xScale","d3","domain","n","range","yScale","line","x","d","i","y","curve","dataset","map","svg","append","attr","call","datum","selectAll","data","enter","components_LineGraph","render","this","$createElement","_self","_c","_m","staticRenderFns","_h","_v","attrs","charset","id","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"qHAYAA,GACAC,KAAA,YACAC,QAFA,WAMA,IAAAC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAC,EAAAC,OAAAC,WAAAH,IACAI,EAAAF,OAAAG,YAAAL,IAMAM,EAAAC,EAAA,IACAC,QAAA,EAAAC,KACAC,OAAA,EAAAT,IAGAU,EAAAJ,EAAA,IACAC,QAAA,OACAE,OAAAN,EAAA,IAGAQ,EAAAL,EAAA,IACAM,EAAA,SAAAC,EAAAC,GAAA,OAAAT,EAAAS,KACAC,EAAA,SAAAF,GAAA,OAAAH,EAAAG,EAAAE,KACAC,MAAAV,EAAA,GAGAW,EAAAX,EAAA,EAnBA,IAmBAY,IAAA,SAAAL,GAAA,OAAAE,EAAA,GAAAT,EAAA,IAAAA,MAGAa,EAAAb,EAAA,sBAAAc,OAAA,OACAC,KAAA,QAAArB,EAAAD,KACAsB,KAAA,SAAAlB,EAAAJ,KACAqB,OAAA,KACAC,KAAA,yBAAAtB,EAAA,IAAAA,EAAA,KAGAoB,EAAAC,OAAA,KACAC,KAAA,kBACAA,KAAA,2BAAAlB,EAAA,KACAmB,KAAAhB,EAAA,EAAAD,IAGAc,EAAAC,OAAA,KACAC,KAAA,kBACAC,KAAAhB,EAAA,EAAAI,IAGAS,EAAAC,OAAA,QACAG,MAAAN,GACAI,KAAA,gBACAA,KAAA,IAAAV,GAGAQ,EAAAK,UAAA,QACAC,KAAAR,GACAS,QAAAN,OAAA,UACAC,KAAA,eACAA,KAAA,cAAAR,EAAAC,GAAA,OAAAT,EAAAS,KACAO,KAAA,cAAAR,GAAA,OAAAH,EAAAG,EAAAE,KACAM,KAAA,SCxEeM,GADEC,OAFjB,WAA0BC,KAAaC,eAAbD,KAAuCE,MAAAC,GAAwB,OAA/DH,KAA+DI,GAAA,IAExEC,iBADjB,WAAoC,IAAaC,EAAbN,KAAaC,eAA0BE,EAAvCH,KAAuCE,MAAAC,IAAAG,EAAwB,OAAAH,EAAA,OAAAA,EAAA,MAA/DH,KAA+DO,GAAA,gBAA/DP,KAA+DO,GAAA,KAAAJ,EAAA,QAAwEK,OAAOC,QAAA,WAA9IT,KAAiKO,GAAA,KAAAJ,EAAA,OAAwBK,OAAOE,GAAA,0BCEpO,IAcAC,EAdyBC,EAAQ,OAcjCC,CACE9C,EACA+B,GATF,EAVA,SAAAgB,GACEF,EAAQ,SAaV,KAEA,MAUeG,EAAA,QAAAJ,EAAiB","file":"static/js/3.b19452474517dcbb1c2a.js","sourcesContent":["<template>\n  <div>\n    <h1>Line Graph</h1>\n    <meta charset='utf-8'>\n\n    <div id='my_dataviz_line'></div>\n\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nexport default {\n  name: 'LineGraph',\n  mounted () {\n    // ---------------------- New code ---------------------------\n    // Code from https://bl.ocks.org/pstuffa/26363646c478b2028d36e7274cedefa6\n    // 2. Use the margin convention practice\n    var margin = {top: 50, right: 50, bottom: 50, left: 50}\n    var width = window.innerWidth - margin.left - margin.right // Use the window's width\n    var height = window.innerHeight - margin.top - margin.bottom // Use the window's height\n\n    // The number of datapoints\n    var n = 21\n\n    // 5. X scale will use the index of our data\n    var xScale = d3.scaleLinear()\n      .domain([0, n - 1]) // input\n      .range([0, width]) // output\n\n    // 6. Y scale will use the randomly generate number\n    var yScale = d3.scaleLinear()\n      .domain([0, 10]) // input\n      .range([height, 0]) // output\n\n    // 7. d3's line generator\n    var line = d3.line()\n      .x(function (d, i) { return xScale(i) }) // set the x values for the line generator\n      .y(function (d) { return yScale(d.y) }) // set the y values for the line generator\n      .curve(d3.curveMonotoneX) // apply smoothing to the line\n\n    // 8. An array of objects of length N. Each object has key - value pair, the key being 'y' and the value is a random number\n    var dataset = d3.range(n).map(function (d) { return {'y': d3.randomUniform(1)() * 10} })\n\n    // 1. Add the SVG to the page and employ #2\n    var svg = d3.select('#my_dataviz_line').append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n    // 3. Call the x axis in a group tag\n    svg.append('g')\n      .attr('class', 'x axis')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(xScale)) // Create an axis component with d3.axisBottom\n\n    // 4. Call the y axis in a group tag\n    svg.append('g')\n      .attr('class', 'y axis')\n      .call(d3.axisLeft(yScale)) // Create an axis component with d3.axisLeft\n\n    // 9. Append the path, bind the data, and call the line generator\n    svg.append('path')\n      .datum(dataset) // 10. Binds data to the line\n      .attr('class', 'line') // Assign a class for styling\n      .attr('d', line) // 11. Calls the line generator\n\n    // 12. Appends a circle for each datapoint\n    svg.selectAll('.dot')\n      .data(dataset)\n      .enter().append('circle') // Uses the enter().append() method\n      .attr('class', 'dot') // Assign a class for styling\n      .attr('cx', function (d, i) { return xScale(i) })\n      .attr('cy', function (d) { return yScale(d.y) })\n      .attr('r', 5)\n  }\n}\n// ========== Start of OLD line chart code\n// set the dimensions and margins of the graph\n/*\nvar margin = {top: 10, right: 30, bottom: 30, left: 60}\nvar width = 460 - margin.left - margin.right\nvar height = 400 - margin.top - margin.bottom\n// append the svg object to the body of the page\nvar svg = d3.select('#my_dataviz_line')\n  .append('svg')\n  .attr('width', width + margin.left + margin.right)\n  .attr('height', height + margin.top + margin.bottom)\n  .append('g')\n  .attr('transform',\n    'translate(' + margin.left + ',' + margin.top + ')')\n// Read the data\nd3.csv('https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv',\n// When reading the csv, I must format variables:\n  function (d) {\n    return { date: d3.timeParse('%Y-%m-%d')(d.date), value: d.value }\n  },\n  // Now I can use this dataset:\n  function (data) {\n    // Add X axis - it is a date format\n    var x = d3.scaleTime()\n      .domain(d3.extent(data, function (d) { return d.date }))\n      .range([ 0, width ])\n    svg.append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x))\n    // Add Y axis\n    var y = d3.scaleLinear()\n      .domain([8000, 9200])\n      .range([ height, 0 ])\n    svg.append('g')\n      .call(d3.axisLeft(y))\n    // Add the line\n    svg.append('path')\n      .datum(data)\n      .attr('fill', 'none')\n      .attr('stroke', '#69b3a2')\n      .attr('stroke-width', 1.5)\n      .attr('d', d3.line()\n        .x(function (d) { return x(d.date) })\n        .y(function (d) { return y(d.value) })\n      )\n    // Add the points\n    svg\n      .append('g')\n      .selectAll('dot')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('cx', function (d) { return x(d.date) })\n      .attr('cy', function (d) { return y(d.value) })\n      .attr('r', 5)\n      .attr('fill', '#69b3a2')\n  }\n)\n*/\n</script>\n\n<style>\n/* 13. Basic Styling with CSS */\n\n/* Style the lines by removing the fill and applying a stroke */\n.line {\n  fill: none;\n  stroke: #ffab00;\n  stroke-width: 3;\n}\n\n/* Style the dots by assigning a fill and stroke */\n.dot {\n  fill: #ffab00;\n  stroke: #fff;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/LineGraph.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"Line Graph\")]),_vm._v(\" \"),_c('meta',{attrs:{\"charset\":\"utf-8\"}}),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"my_dataviz_line\"}})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-73beca2a\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/LineGraph.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-73beca2a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./LineGraph.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LineGraph.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./LineGraph.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-73beca2a\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./LineGraph.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/LineGraph.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}